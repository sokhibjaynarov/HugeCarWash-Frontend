{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\jayna\\\\Desktop\\\\HugeCarWash\\\\HugeCarWash.Web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrderService {\n  constructor(http) {\n    this.http = http;\n    this._baseUrl = 'https://localhost:5001/api/orders';\n  }\n\n  getOrders() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.http.get(`${_this._baseUrl}`).pipe(map(data => {\n        return data.data;\n      }));\n    })();\n  }\n\n  getOrders1() {\n    async;\n    getOrder(orderId, string);\n    Promise < Observable < IOrder >> {\n      return: this.http.get(`${this._baseUrl}/${orderId}`).pipe(map(data => {\n        return data.data;\n      }))\n    };\n    getOrder1(orderId, string);\n    Promise < IOrder > {\n      return: this.http.get(`${this._baseUrl}/${orderId}`).toPromise().then(data => {\n        return data.data;\n      }).catch(err => {\n        console.log(err);\n      })\n    };\n    async;\n    createOrder(order, IOrder);\n    Promise < Observable < IOrder >> {\n      return: this.http.post(this._baseUrl, order).pipe(map(data => {\n        return data.data;\n      }))\n    };\n    async;\n    updateOrder(order, IOrder, id, string);\n    Promise < Observable < IOrder >> {\n      return: this.http.put(`${this._baseUrl}/${id}`, order).pipe(map(data => {\n        return data.data;\n      }))\n    };\n    async;\n    deleteOrder(id, string);\n    Promise < Observable < boolean >> {\n      return: this.http.delete(`${this._baseUrl}/${id}`).pipe(map(data => {\n        return data.data;\n      }))\n    };\n  }\n\n}\n\nOrderService.ɵfac = function OrderService_Factory(t) {\n  return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderService,\n  factory: OrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/jayna/Desktop/HugeCarWash/HugeCarWash.Web/src/app/services/order/order.service.ts"],"names":["Observable","map","i0","i1","OrderService","constructor","http","_baseUrl","getOrders","get","pipe","data","getOrders1","async","getOrder","orderId","string","Promise","IOrder","return","getOrder1","toPromise","then","catch","err","console","log","createOrder","order","post","updateOrder","id","put","deleteOrder","boolean","delete","ɵfac","OrderService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class OrderService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this._baseUrl = 'https://localhost:5001/api/orders';\r\n    }\r\n    async getOrders() {\r\n        return this.http.get(`${this._baseUrl}`).pipe(map((data) => {\r\n            return data.data;\r\n        }));\r\n    }\r\n    getOrders1() {\r\n        async;\r\n        getOrder(orderId, string);\r\n        Promise < Observable < IOrder >> {\r\n            return: this.http.get(`${this._baseUrl}/${orderId}`).pipe(map((data) => {\r\n                return data.data;\r\n            }))\r\n        };\r\n        getOrder1(orderId, string);\r\n        Promise < IOrder > {\r\n            return: this.http.get(`${this._baseUrl}/${orderId}`).toPromise().then((data) => {\r\n                return data.data;\r\n            }).catch(err => {\r\n                console.log(err);\r\n            })\r\n        };\r\n        async;\r\n        createOrder(order, IOrder);\r\n        Promise < Observable < IOrder >> {\r\n            return: this.http.post(this._baseUrl, order).pipe(map((data) => {\r\n                return data.data;\r\n            }))\r\n        };\r\n        async;\r\n        updateOrder(order, IOrder, id, string);\r\n        Promise < Observable < IOrder >> {\r\n            return: this.http.put(`${this._baseUrl}/${id}`, order).pipe(map((data) => {\r\n                return data.data;\r\n            }))\r\n        };\r\n        async;\r\n        deleteOrder(id, string);\r\n        Promise < Observable < boolean >> {\r\n            return: this.http.delete(`${this._baseUrl}/${id}`).pipe(map((data) => {\r\n                return data.data;\r\n            }))\r\n        };\r\n    }\r\n}\r\nOrderService.ɵfac = function OrderService_Factory(t) { return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient)); };\r\nOrderService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OrderService, factory: OrderService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}