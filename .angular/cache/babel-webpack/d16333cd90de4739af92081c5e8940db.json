{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClientService {\n  constructor(http) {\n    this.http = http;\n    this._baseUrl = \"https://localhost:5001/api/Users\";\n  } // async getClients() : Promise<Observable<IClient[]>> {\n  //   return this.http.get<IClient[]>(this._baseUrl).pipe(map((data: any) => {\n  //     return data.data;\n  //   }));\n  // }\n  // async getClient(id: string) : Promise<Observable<IClient>> {\n  //   return this.http.get(this._baseUrl + \"/\" + id).pipe(map((data: any) => {\n  //     return data.data;\n  //   }));\n  // }\n  // async createClient(client: IClient) : Promise<Observable<IClient>> {\n  //   return this.http.post(this._baseUrl, client).pipe(map((data: any) => {\n  //     return data.data;\n  //   }));\n  // }\n  // async updateClient(client: IClient, id: string) : Promise<Observable<IClient>> {\n  //   return this.http.put(this._baseUrl + \"/\" + id, client).pipe(map((data: any) => {\n  //     console.log(id);\n  //     return data.data;\n  //   }));\n  // }\n  // async deleteClient(id: string) : Promise<Observable<boolean>> {\n  //   return this.http.delete(this._baseUrl + \"/\" + id).pipe(map((data: any) => {\n  //     return data.data;\n  //   }));\n  // }\n  // async getData() : Promise<Observable<string[]>> {\n  //   return this.http.get(this._baseUrl).pipe(map((data: any) => {\n  //     return data.data.map((item: any) => item.carNumber);\n  //   }));\n  // }\n\n\n  getClients() {\n    return this.http.get(this._baseUrl).toPromise().then(data => {\n      return data.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  getClient(id) {\n    return this.http.get(this._baseUrl + \"/\" + id).toPromise().then(data => {\n      return data.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  createClient(client) {\n    return this.http.post(this._baseUrl, client).toPromise().then(data => {\n      return data.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  updateClient(client, id) {}\n\n}\n\nClientService.ɵfac = function ClientService_Factory(t) {\n  return new (t || ClientService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClientService,\n  factory: ClientService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/jayna/Desktop/HugeCarWash/HugeCarWash.Web/src/app/services/client/client.service.ts"],"names":["i0","i1","ClientService","constructor","http","_baseUrl","getClients","get","toPromise","then","data","catch","err","console","log","getClient","id","createClient","client","post","updateClient","ɵfac","ClientService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgB,kCAAhB;AACH,GAJsB,CAKvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKF,IAAL,CAAUG,GAAV,CAAc,KAAKF,QAAnB,EAA6BG,SAA7B,GAAyCC,IAAzC,CAA+CC,IAAD,IAAU;AAC3D,aAAOA,IAAI,CAACA,IAAZ;AACH,KAFM,EAEJC,KAFI,CAEEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAJM,CAAP;AAKH;;AACDG,EAAAA,SAAS,CAACC,EAAD,EAAK;AACV,WAAO,KAAKZ,IAAL,CAAUG,GAAV,CAAc,KAAKF,QAAL,GAAgB,GAAhB,GAAsBW,EAApC,EAAwCR,SAAxC,GAAoDC,IAApD,CAA0DC,IAAD,IAAU;AACtE,aAAOA,IAAI,CAACA,IAAZ;AACH,KAFM,EAEJC,KAFI,CAEEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAJM,CAAP;AAKH;;AACDK,EAAAA,YAAY,CAACC,MAAD,EAAS;AACjB,WAAO,KAAKd,IAAL,CAAUe,IAAV,CAAe,KAAKd,QAApB,EAA8Ba,MAA9B,EAAsCV,SAAtC,GAAkDC,IAAlD,CAAwDC,IAAD,IAAU;AACpE,aAAOA,IAAI,CAACA,IAAZ;AACH,KAFM,EAEJC,KAFI,CAEEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAJM,CAAP;AAKH;;AACDQ,EAAAA,YAAY,CAACF,MAAD,EAASF,EAAT,EAAa,CACxB;;AA1DsB;;AA4D3Bd,aAAa,CAACmB,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAIrB,aAAV,EAAyBF,EAAE,CAACwB,QAAH,CAAYvB,EAAE,CAACwB,UAAf,CAAzB,CAAP;AAA8D,CAAvH;;AACAvB,aAAa,CAACwB,KAAd,GAAsB,aAAc1B,EAAE,CAAC2B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE1B,aAAT;AAAwB2B,EAAAA,OAAO,EAAE3B,aAAa,CAACmB,IAA/C;AAAqDS,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ClientService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this._baseUrl = \"https://localhost:5001/api/Users\";\r\n    }\r\n    // async getClients() : Promise<Observable<IClient[]>> {\r\n    //   return this.http.get<IClient[]>(this._baseUrl).pipe(map((data: any) => {\r\n    //     return data.data;\r\n    //   }));\r\n    // }\r\n    // async getClient(id: string) : Promise<Observable<IClient>> {\r\n    //   return this.http.get(this._baseUrl + \"/\" + id).pipe(map((data: any) => {\r\n    //     return data.data;\r\n    //   }));\r\n    // }\r\n    // async createClient(client: IClient) : Promise<Observable<IClient>> {\r\n    //   return this.http.post(this._baseUrl, client).pipe(map((data: any) => {\r\n    //     return data.data;\r\n    //   }));\r\n    // }\r\n    // async updateClient(client: IClient, id: string) : Promise<Observable<IClient>> {\r\n    //   return this.http.put(this._baseUrl + \"/\" + id, client).pipe(map((data: any) => {\r\n    //     console.log(id);\r\n    //     return data.data;\r\n    //   }));\r\n    // }\r\n    // async deleteClient(id: string) : Promise<Observable<boolean>> {\r\n    //   return this.http.delete(this._baseUrl + \"/\" + id).pipe(map((data: any) => {\r\n    //     return data.data;\r\n    //   }));\r\n    // }\r\n    // async getData() : Promise<Observable<string[]>> {\r\n    //   return this.http.get(this._baseUrl).pipe(map((data: any) => {\r\n    //     return data.data.map((item: any) => item.carNumber);\r\n    //   }));\r\n    // }\r\n    getClients() {\r\n        return this.http.get(this._baseUrl).toPromise().then((data) => {\r\n            return data.data;\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    getClient(id) {\r\n        return this.http.get(this._baseUrl + \"/\" + id).toPromise().then((data) => {\r\n            return data.data;\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    createClient(client) {\r\n        return this.http.post(this._baseUrl, client).toPromise().then((data) => {\r\n            return data.data;\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    updateClient(client, id) {\r\n    }\r\n}\r\nClientService.ɵfac = function ClientService_Factory(t) { return new (t || ClientService)(i0.ɵɵinject(i1.HttpClient)); };\r\nClientService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ClientService, factory: ClientService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}