{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrderService {\n  constructor(http) {\n    this.http = http;\n    this._baseUrl = 'https://localhost:5001/api/orders';\n  } // async getOrders() : Promise<Observable<IOrder[]>> {\n  //   return this.http.get(`${this._baseUrl}`).pipe(map((data: any) => {\n  //     return data.data;\n  //   }));\n  // }\n  // async getOrder(orderId: string) : Promise<Observable<IOrder>> {\n  //   return this.http.get(`${this._baseUrl}/${orderId}`).pipe(map((data: any) => {\n  //     return data.data;\n  //   }));\n  // }\n  // async createOrder(order: IOrder) : Promise<Observable<IOrder>> {\n  //   return this.http.post(this._baseUrl, order).pipe(map((data: any) => {\n  //     return data.data;\n  //   }));\n  // }\n  // async updateOrder(order: IOrder, id: string) : Promise<Observable<IOrder>> {\n  //   return this.http.put(`${this._baseUrl}/${id}`, order).pipe(map((data: any) => {\n  //     return data.data;\n  //   }));\n  // }\n  // async deleteOrder(id: string) : Promise<Observable<boolean>> {\n  //   return this.http.delete(`${this._baseUrl}/${id}`).pipe(map((data: any) => {\n  //     return data.data;\n  //   }));\n  // }\n\n\n  getOrders() {\n    return this.http.get(this._baseUrl).toPromise().then(data => {\n      return data.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  getOrder(orderId) {\n    return this.http.get(`${this._baseUrl}/${orderId}`).toPromise().then(data => {\n      return data.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  createOrder(order) {\n    return this.http.post(this._baseUrl, order).toPromise().then(data => {\n      return data.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  updateOrder(order, id) {\n    return this.http.put(`${this._baseUrl}/${id}`, order).toPromise().then(data => {\n      return data.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  deleteOrder(id) {}\n\n}\n\nOrderService.ɵfac = function OrderService_Factory(t) {\n  return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderService,\n  factory: OrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/jayna/Desktop/HugeCarWash/HugeCarWash.Web/src/app/services/order/order.service.ts"],"names":["i0","i1","OrderService","constructor","http","_baseUrl","getOrders","get","toPromise","then","data","catch","err","console","log","getOrder","orderId","createOrder","order","post","updateOrder","id","put","deleteOrder","ɵfac","OrderService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgB,mCAAhB;AACH,GAJqB,CAKtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKF,IAAL,CAAUG,GAAV,CAAc,KAAKF,QAAnB,EAA6BG,SAA7B,GAAyCC,IAAzC,CAA+CC,IAAD,IAAU;AAC3D,aAAOA,IAAI,CAACA,IAAZ;AACH,KAFM,EAEJC,KAFI,CAEEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAJM,CAAP;AAKH;;AACDG,EAAAA,QAAQ,CAACC,OAAD,EAAU;AACd,WAAO,KAAKZ,IAAL,CAAUG,GAAV,CAAe,GAAE,KAAKF,QAAS,IAAGW,OAAQ,EAA1C,EAA6CR,SAA7C,GAAyDC,IAAzD,CAA+DC,IAAD,IAAU;AAC3E,aAAOA,IAAI,CAACA,IAAZ;AACH,KAFM,EAEJC,KAFI,CAEEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAJM,CAAP;AAKH;;AACDK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,WAAO,KAAKd,IAAL,CAAUe,IAAV,CAAe,KAAKd,QAApB,EAA8Ba,KAA9B,EAAqCV,SAArC,GAAiDC,IAAjD,CAAuDC,IAAD,IAAU;AACnE,aAAOA,IAAI,CAACA,IAAZ;AACH,KAFM,EAEJC,KAFI,CAEEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAJM,CAAP;AAKH;;AACDQ,EAAAA,WAAW,CAACF,KAAD,EAAQG,EAAR,EAAY;AACnB,WAAO,KAAKjB,IAAL,CAAUkB,GAAV,CAAe,GAAE,KAAKjB,QAAS,IAAGgB,EAAG,EAArC,EAAwCH,KAAxC,EAA+CV,SAA/C,GAA2DC,IAA3D,CAAiEC,IAAD,IAAU;AAC7E,aAAOA,IAAI,CAACA,IAAZ;AACH,KAFM,EAEJC,KAFI,CAEEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAJM,CAAP;AAKH;;AACDW,EAAAA,WAAW,CAACF,EAAD,EAAK,CACf;;AA3DqB;;AA6D1BnB,YAAY,CAACsB,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAIxB,YAAV,EAAwBF,EAAE,CAAC2B,QAAH,CAAY1B,EAAE,CAAC2B,UAAf,CAAxB,CAAP;AAA6D,CAApH;;AACA1B,YAAY,CAAC2B,KAAb,GAAqB,aAAc7B,EAAE,CAAC8B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE7B,YAAT;AAAuB8B,EAAAA,OAAO,EAAE9B,YAAY,CAACsB,IAA7C;AAAmDS,EAAAA,UAAU,EAAE;AAA/D,CAAtB,CAAnC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class OrderService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this._baseUrl = 'https://localhost:5001/api/orders';\r\n    }\r\n    // async getOrders() : Promise<Observable<IOrder[]>> {\r\n    //   return this.http.get(`${this._baseUrl}`).pipe(map((data: any) => {\r\n    //     return data.data;\r\n    //   }));\r\n    // }\r\n    // async getOrder(orderId: string) : Promise<Observable<IOrder>> {\r\n    //   return this.http.get(`${this._baseUrl}/${orderId}`).pipe(map((data: any) => {\r\n    //     return data.data;\r\n    //   }));\r\n    // }\r\n    // async createOrder(order: IOrder) : Promise<Observable<IOrder>> {\r\n    //   return this.http.post(this._baseUrl, order).pipe(map((data: any) => {\r\n    //     return data.data;\r\n    //   }));\r\n    // }\r\n    // async updateOrder(order: IOrder, id: string) : Promise<Observable<IOrder>> {\r\n    //   return this.http.put(`${this._baseUrl}/${id}`, order).pipe(map((data: any) => {\r\n    //     return data.data;\r\n    //   }));\r\n    // }\r\n    // async deleteOrder(id: string) : Promise<Observable<boolean>> {\r\n    //   return this.http.delete(`${this._baseUrl}/${id}`).pipe(map((data: any) => {\r\n    //     return data.data;\r\n    //   }));\r\n    // }\r\n    getOrders() {\r\n        return this.http.get(this._baseUrl).toPromise().then((data) => {\r\n            return data.data;\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    getOrder(orderId) {\r\n        return this.http.get(`${this._baseUrl}/${orderId}`).toPromise().then((data) => {\r\n            return data.data;\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    createOrder(order) {\r\n        return this.http.post(this._baseUrl, order).toPromise().then((data) => {\r\n            return data.data;\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    updateOrder(order, id) {\r\n        return this.http.put(`${this._baseUrl}/${id}`, order).toPromise().then((data) => {\r\n            return data.data;\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    deleteOrder(id) {\r\n    }\r\n}\r\nOrderService.ɵfac = function OrderService_Factory(t) { return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient)); };\r\nOrderService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OrderService, factory: OrderService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}