{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\jayna\\\\Desktop\\\\HugeCarWash\\\\HugeCarWash.Web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrderService {\n  constructor(http) {\n    this.http = http;\n    this._baseUrl = 'https://localhost:5001/api/orders';\n  }\n\n  getOrders() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.http.get(`${_this._baseUrl}`).pipe(map(data => {\n        return data.data;\n      }));\n    })();\n  }\n\n  getOrder(orderId) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.http.get(`${_this2._baseUrl}/${orderId}`).pipe(map(data => {\n        return data.data;\n      }));\n    })();\n  }\n\n  getOrder1(orderId) {\n    return this.http.get(`${this._baseUrl}/${orderId}`).toPromise().then(data => {\n      return data.data;\n    }, async, createOrder(order, IOrder), Promise < Observable < IOrder >> {\n      return: this.http.post(this._baseUrl, order).pipe(map(data => {\n        return data.data;\n      }))\n    }, async, updateOrder(order, IOrder, id, string), Promise < Observable < IOrder >> {\n      return: this.http.put(`${this._baseUrl}/${id}`, order).pipe(map(data => {\n        return data.data;\n      }))\n    }, async, deleteOrder(id, string), Promise < Observable < boolean >> {\n      return: this.http.delete(`${this._baseUrl}/${id}`).pipe(map(data => {\n        return data.data;\n      }))\n    });\n  }\n\n}\n\nOrderService.ɵfac = function OrderService_Factory(t) {\n  return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderService,\n  factory: OrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/jayna/Desktop/HugeCarWash/HugeCarWash.Web/src/app/services/order/order.service.ts"],"names":["Observable","map","i0","i1","OrderService","constructor","http","_baseUrl","getOrders","get","pipe","data","getOrder","orderId","getOrder1","toPromise","then","async","createOrder","order","IOrder","Promise","return","post","updateOrder","id","string","put","deleteOrder","boolean","delete","ɵfac","OrderService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class OrderService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this._baseUrl = 'https://localhost:5001/api/orders';\r\n    }\r\n    async getOrders() {\r\n        return this.http.get(`${this._baseUrl}`).pipe(map((data) => {\r\n            return data.data;\r\n        }));\r\n    }\r\n    async getOrder(orderId) {\r\n        return this.http.get(`${this._baseUrl}/${orderId}`).pipe(map((data) => {\r\n            return data.data;\r\n        }));\r\n    }\r\n    getOrder1(orderId) {\r\n        return this.http.get(`${this._baseUrl}/${orderId}`).toPromise().then((data) => {\r\n            return data.data;\r\n        }, async, createOrder(order, IOrder), Promise < Observable < IOrder >> {\r\n            return: this.http.post(this._baseUrl, order).pipe(map((data) => {\r\n                return data.data;\r\n            }))\r\n        }, async, updateOrder(order, IOrder, id, string), Promise < Observable < IOrder >> {\r\n            return: this.http.put(`${this._baseUrl}/${id}`, order).pipe(map((data) => {\r\n                return data.data;\r\n            }))\r\n        }, async, deleteOrder(id, string), Promise < Observable < boolean >> {\r\n            return: this.http.delete(`${this._baseUrl}/${id}`).pipe(map((data) => {\r\n                return data.data;\r\n            }))\r\n        });\r\n    }\r\n}\r\nOrderService.ɵfac = function OrderService_Factory(t) { return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient)); };\r\nOrderService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OrderService, factory: OrderService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}